// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolve-storage-mysql-serverless "getLatestEvent" should get the latest event 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` 
    ORDER BY \`eventId\` DESC LIMIT 0, 1",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` WHERE \`type\` IN (FROM_BASE64(\\"QUFB\\"))
    ORDER BY \`eventId\` DESC LIMIT 0, 1",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` WHERE \`aggregateId\` IN (FROM_BASE64(\\"aWQx\\"))
    ORDER BY \`eventId\` DESC LIMIT 0, 1",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` WHERE \`timestamp\` > 1 AND \`timestamp\` < 3
    ORDER BY \`eventId\` DESC LIMIT 0, 1",
  },
]
`;

exports[`resolve-storage-mysql-serverless "loadEvents" should load events 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` 
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` 
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` WHERE \`type\` IN (FROM_BASE64(\\"QUFB\\"))
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` WHERE \`aggregateId\` IN (FROM_BASE64(\\"aWQx\\"))
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` WHERE \`timestamp\` > 1 AND \`timestamp\` < 3
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
]
`;

exports[`resolve-storage-mysql-serverless "saveEvent" should save an event 1`] = `
Array [
  "beginTransaction",
  Object {
    "database": "event-store",
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
        SELECT \`eventId\` + 1  AS \`lastEventId\`,
        GREATEST(
          CAST(UNIX_TIMESTAMP(NOW(3)) * 1000 AS SIGNED),
          \`timestamp\`
        ) AS \`lastTimestamp\`
        FROM \`events-sequence\`
        WHERE \`key\` = 0;
      ",
    "transactionId": "transactionId",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
        UPDATE \`events-sequence\`
        SET \`eventId\` = NaN,
        \`transactionId\` = FROM_BASE64(\\"dHJhbnNhY3Rpb25JZA==\\"),
        \`timestamp\` = NaN
        WHERE \`key\` = 0;
      ",
    "transactionId": "transactionId",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
        INSERT INTO \`events\`(
          \`eventId\`,
          \`timestamp\`,
          \`aggregateId\`,
          \`aggregateVersion\`,
          \`type\`,
          \`payload\`
        ) VALUES (
          NaN,
          NaN,
          FROM_BASE64(\\"aWQx\\"),
          1,
          FROM_BASE64(\\"QUFB\\"),
          FROM_BASE64(\\"eyJpbmRleCI6MX0=\\")
        );
      ",
    "transactionId": "transactionId",
  },
  "commitTransaction",
  Object {
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "transactionId": "transactionId",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` 
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
]
`;

exports[`resolve-storage-mysql-serverless "saveEvent" should save an event with empty payload 1`] = `
Array [
  "beginTransaction",
  Object {
    "database": "event-store",
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
        SELECT \`eventId\` + 1  AS \`lastEventId\`,
        GREATEST(
          CAST(UNIX_TIMESTAMP(NOW(3)) * 1000 AS SIGNED),
          \`timestamp\`
        ) AS \`lastTimestamp\`
        FROM \`events-sequence\`
        WHERE \`key\` = 0;
      ",
    "transactionId": "transactionId",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
        UPDATE \`events-sequence\`
        SET \`eventId\` = NaN,
        \`transactionId\` = FROM_BASE64(\\"dHJhbnNhY3Rpb25JZA==\\"),
        \`timestamp\` = NaN
        WHERE \`key\` = 0;
      ",
    "transactionId": "transactionId",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
        INSERT INTO \`events\`(
          \`eventId\`,
          \`timestamp\`,
          \`aggregateId\`,
          \`aggregateVersion\`,
          \`type\`,
          \`payload\`
        ) VALUES (
          NaN,
          NaN,
          FROM_BASE64(\\"aWQx\\"),
          1,
          FROM_BASE64(\\"QUFB\\"),
          FROM_BASE64(\\"bnVsbA==\\")
        );
      ",
    "transactionId": "transactionId",
  },
  "commitTransaction",
  Object {
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "transactionId": "transactionId",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "event-store",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \`events\` 
      ORDER BY \`eventId\` ASC
      LIMIT 0, 50",
  },
]
`;
